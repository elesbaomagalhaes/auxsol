generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model kit {
  id                   String   @id @default(uuid())
  status               String?  @default("a")
  numProjeto           String 
  tipo                 String   // Tipo do item: "modulo", "inversor", "protecaoCA", "stringBoxCC"
  itemId               String   // ID do módulo, inversor, proteção CA ou string box CC
  qtd                  Decimal @db.Decimal(10,2)
  string               Decimal? @db.Decimal(5,0)
  potenciaGerador      Decimal? @db.Decimal(10,2)
  potenciaInversor     Decimal? @db.Decimal(10,2)                         
  userId               String
  user                 user     @relation(fields: [userId], references: [id])
  cliente              cliente  @relation(fields: [numProjeto], references: [numProjeto])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model acesso {
  id                   String   @id @default(uuid())
  numProjeto           String   @unique
  nomeConcessionaria   String
  contractNumber       String
  tensaoRede           String
  grupoConexao         String
  tipoConexao          String
  tipoSolicitacao      String
  tipoRamal            String
  ramoAtividade        String
  enquadramentoGeracao String
  tipoGeracao          String
  potenciaInstalada    String?
  fotoMedidor          String?
  poste                String?
  longitudeUTM         String
  latitudeUTM          String
  alocacaoCredito      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  clienteCpf           String @unique
  client               cliente?    @relation(fields: [clienteCpf], references: [cpf])
  userId               String?
  user                 user?    @relation(fields: [userId], references: [id])
  projeto              projeto[]
  rateios              rateio[]
}

model rateio {
  id                   String   @id @default(uuid())
  status               String?  @default("a")
  numProjeto           String
  ccontrato            String
  classConsumo         String
  logradouro           String
  acesso               acesso  @relation(fields: [numProjeto], references: [numProjeto])
  userId               String
  user                 user     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model cliente {
  id               String   @id @default(uuid())
  nome             String
  rgCnh            String
  rgCnhDataEmissao DateTime
  cpf              String   @unique
  fone             String
  email            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime 
  rua              String
  numero           String
  complemento      String?
  bairro           String
  cidade           String
  uf               String
  cep              String
  fotoRG           String?
  fotoMedidor      String?
  numProjeto       String?   @unique
  acesso           acesso?
  projetos         projeto[]
  kits             kit[]     // Relação com os kits do cliente
  userId           String?
  user             user?    @relation(fields: [userId], references: [id])
}

model user {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      account[]
  sessions      session[]
  userType      String
  password     String
  Authenticator authenticator[]
  passwordResetCodes passwordResetCode[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modulos     modulo[]
  inversores  inversor[]
  tecnicos    tecnico[]
  stringBoxCCs stringBoxCC[]
  protecaoCAs protecaoCA[]
  clientes    cliente[]
  acessos     acesso[]
  projetos    projeto[]
  kits        kit[]           // Relação com os kits do usuário
  bibliotecas biblioteca[]     // Relação com as bibliotecas do usuário
  rateios     rateio[]
}

model tecnico {
  id               String   @id @default(uuid())
  nome             String
  registro         String
  rgCnh            String
  cpf              String   @unique
  fone             String
  email            String
  tipoProfissional String
  logradouro       String
  numero           String
  complemento      String?
  bairro           String
  cidade           String
  uf               String
  cep              String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?
  user             user?    @relation(fields: [userId], references: [id])
  projetos         projeto[]

}

model stringBoxCC {
  id                    String   @id @default(uuid())
  fabricante            String
  modelo                String
  numeroEntradas        Int
  numeroSaidas          Int
  tensaoMaxOperacao     String
  correnteMaxOperacao   String
  classeDps             String
  nivelProtecao         String
  correnteNominalDescarga String
  correnteMaxDescarga   String
  numeroPoloSeccionadora Int
  grauProtecao          String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userId                String?
  user                  user?    @relation(fields: [userId], references: [id])
}

model protecaoCA {
  id          String   @id @default(uuid())
  numeroPoloDisjuntor     Int
  tensaoNomDisjuntor      String
  correnteNomDisjuntor    String
  frequenciaNomDisjuntor  String
  elementoProtDisjuntor   String
  correnteMaxDisjuntor    String?
  curvaDisjuntor          String
  classeDps               String
  correnteNomDPS          String
  correnteMaxDPS          String?
  tensaoNomDPS            String?
  tensaoMaxDPS            String?
  numeroPoloDPS           Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId                  String?
  modelo                  String?
  user        user?    @relation(fields: [userId], references: [id]) 
}

model projeto {
  id                String      @id @default(uuid())
  status            String      @default("a")
  numProjeto        String      @unique
  potenciaGerador   Decimal     @db.Decimal(10,2)
  potenciaInversor Decimal      @db.Decimal(10,2)
  consumo           Decimal?    @db.Decimal(10,2)
  jan               Decimal?    @db.Decimal(10,2)
  fev               Decimal?    @db.Decimal(10,2)
  mar               Decimal?    @db.Decimal(10,2)
  abr               Decimal?    @db.Decimal(10,2)
  mai               Decimal?    @db.Decimal(10,2)
  jun               Decimal?    @db.Decimal(10,2)
  jul               Decimal?    @db.Decimal(10,2)
  ago               Decimal?    @db.Decimal(10,2)
  set               Decimal?    @db.Decimal(10,2)
  out               Decimal?    @db.Decimal(10,2)
  nov               Decimal?    @db.Decimal(10,2)
  dez               Decimal?    @db.Decimal(10,2)
  disjuntorPadrao   Int?        @default(1)
  sessaoCondutor    Int?        @default(1)
  numFases           Int?        @default(1)
  numeroPoloDisjuntor Int?
  urlMapa           String?
  urlDoc            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  clienteCpf        String
  cliente           cliente     @relation(fields: [clienteCpf], references: [cpf])
  tecnicoCpf        String
  tecnico           tecnico     @relation(fields: [tecnicoCpf], references: [cpf])
  acessoCpf         String
  acesso            acesso      @relation(fields: [acessoCpf], references: [clienteCpf])
  userId            String?
  user              user?       @relation(fields: [userId], references: [id])
  anexos            anexo[]
  cargasInstalada  cargaInstalada[]
}

model anexo {
  id                  String   @id @default(uuid())
  projetoId           String
  fileName            String
  fileSize            Int
  fileType            String
  cloudinaryUrl       String
  cloudinaryPublicId  String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  projeto             projeto  @relation(fields: [projetoId], references: [id], onDelete: Cascade)
}
 
model account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model verificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model passwordResetCode {
  id         String   @id @default(uuid())
  code       String   @unique
  email      String
  expiry     DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model modulo {
  id                  String     @id @default(uuid())
  modelo              String
  fabricante          String
  potenciaNominal     Decimal @db.Decimal(5,2)
  tensaoCircAberto    String
  correnteCurtCirc    String
  tensaoMaxOper       Decimal @db.Decimal(5,2)
  correnteMaxOper     Decimal @db.Decimal(5,2)
  eficiencia          String
  datasheet           String?
  seloInmetro         String?
  comprimento         Decimal @db.Decimal(8,2)
  largura             Decimal @db.Decimal(8,2)
  area                Decimal @db.Decimal(8,2)
  peso                Decimal @db.Decimal(8,2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  userId              String?
  user                user?     @relation(fields: [userId], references: [id])
}

model inversor {
  id                  String     @id @default(uuid())
  fabricante          String
  modelo              String
  potenciaNomEnt      Decimal @db.Decimal(10,2)
  potenciaMaxEnt      Decimal @db.Decimal(10,2)
  tensaoMaxEnt        String
  tensaoInic          String
  tensaoNomEnt        String
  numeroEntMPPT       Int
  potenciaMaxMPPT     String
  correnteMaxEnt      String
  correnteMaxCurtCirc String
  potenciaNomSai      Decimal @db.Decimal(10,2)
  potenciaMaxSai      Decimal @db.Decimal(10,2)
  correnteNomSai      String
  correnteMaxSai      String
  tensaoNomSai        String
  THD                 String
  frequenciaNom       String
  fatorPotencia       Decimal @db.Decimal(10,2)
  tensaoMaxsSai       String
  tensaoMinSai        String
  eficiencia          Decimal @db.Decimal(10,2)
  tipoInv             String?
  tipoLigacao         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  userId              String?
  user                user?     @relation(fields: [userId], references: [id])
}

model concessionaria {
  id                   String   @id @default(uuid())
  status               String @default("a")
  nome                 String
  sigla                String
  estado               String
  normaTecnica         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model uf {
  id                   String   @id @default(uuid())
  status               String @default("a")
  nome                 String
  sigla                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model equipamento {
  id                   String   @id @default(uuid())
  status                String @default("a")
  descricao             String
  tipo                  String
  potencia              Decimal @db.Decimal(8,2)
  fatorPotencia         Decimal @db.Decimal(8,2)
  tensao                Decimal @db.Decimal(8,2)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cargasInstaladas     cargaInstalada[]
}

model cargaInstalada {
  id                   String   @id @default(uuid())
  status               String @default("a")
  numProjeto           String
  idEquipamento        String
  qtd                  Decimal @db.Decimal(3,2)
  potenciaW            Decimal @db.Decimal(8,2)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  projeto              projeto @relation(fields: [numProjeto], references: [numProjeto])
  equipamento          equipamento @relation(fields: [idEquipamento], references: [id])
}

model biblioteca {
  id                   String   @id @default(uuid())
  status               String @default("a")
  descricao             String
  tipo                  String
  url                   String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userId                String?
  user                  user?    @relation(fields: [userId], references: [id])
}
